
import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected


import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected

import streamlit as st
import numpy as np
import plotly.graph_objs as go
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("Multiverse Physics Simulation")

# Sidebar - Universe Constants with % change display
st.sidebar.header("Adjust Physical Constants")





def slider_with_percent(label, min_value, max_value, value, step):
    col1, col2 = st.sidebar.columns([3, 1])

    # Text input first for user-defined value
    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed", key=label)

    # Validate user input
    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    # Apply button to sync value
    apply_key = f"{label}_apply"
    if st.sidebar.button("Apply", key=apply_key):
        slider_val = precise_val
    else:
        slider_val = value

    # Always render slider
    slider_val = col1.slider(label, min_value, max_value, slider_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)

    return slider_val

    with col2:
        st.markdown("<span style='font-size:11px;'>User Input</span>", unsafe_allow_html=True)
        precise_val_input = st.text_input("", str(value), label_visibility="collapsed")

    try:
        precise_val = float(precise_val_input)
        if precise_val < min_value:
            precise_val = min_value
        elif precise_val > max_value:
            precise_val = max_value
    except:
        precise_val = value

    slider_val = col1.slider(label, min_value, max_value, precise_val, step)

    percent_change = (slider_val - 1.0) * 100
    st.sidebar.markdown(f"<span style='font-size:12px;'>{label} Change: {percent_change:+.1f}% from baseline</span>", unsafe_allow_html=True)
    return slider_val

constants = {
    "Strong Force Multiplier": slider_with_percent("Strong Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Electromagnetic Force Multiplier": slider_with_percent("EM Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Weak Force Multiplier": slider_with_percent("Weak Force Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Gravitational Constant Multiplier": slider_with_percent("Gravitational Multiplier", 0.1, 10.0, 1.0, 0.01),
    "Dark Energy Multiplier": slider_with_percent("Dark Energy Multiplier", 0.1, 10.0, 1.0, 0.01),
}

deviation = sum(abs(v - 1.0) for v in constants.values())
st.header("Universe Stability Summary")
st.write(f"Deviation from Standard Model: **{deviation:.2f}**")
if deviation == 0:
    st.success("This universe matches our own. Chemistry and life likely stable.")
elif deviation < 3:
    st.warning("Moderate deviation detected. Instability possible.")
else:
    st.error("High deviation. Unstable universe likely.")

st.divider()

# Tabs
tabs = st.tabs([
    "Periodic Table Stability (3D)", "Island of Instability (3D)", "Star Formation Potential (3D)", 
    "Life Probability (Heatmap)", "Quantum Bonding (3D)", "Universe Probability",
    "Element Abundance", "Radiation Risk", "Star Lifespan", "2D Dark Matter Simulation", "3D Atomic Stability"
])

# Graphs autogenerated per tab selected
